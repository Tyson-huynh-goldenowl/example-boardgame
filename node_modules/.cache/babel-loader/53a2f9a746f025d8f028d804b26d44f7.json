{"ast":null,"code":"import { r as Setup, f as Enhance, E as EnhanceCtx, h as Flush } from './turn-order-62966a9c.js';\nimport { P as ProcessGameConfig } from './reducer-763b001e.js';\n/*\r\n * Copyright 2020 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n\n/**\r\n * Creates the initial game state.\r\n */\n\nfunction InitializeGame({\n  game,\n  numPlayers,\n  setupData\n}) {\n  game = ProcessGameConfig(game);\n\n  if (!numPlayers) {\n    numPlayers = 2;\n  }\n\n  const ctx = game.flow.ctx(numPlayers);\n  let state = {\n    // User managed state.\n    G: {},\n    // Framework managed state.\n    ctx,\n    // Plugin related state.\n    plugins: {}\n  }; // Run plugins over initial state.\n\n  state = Setup(state, {\n    game\n  });\n  state = Enhance(state, {\n    game,\n    playerID: undefined\n  });\n  const enhancedCtx = EnhanceCtx(state);\n  state.G = game.setup(enhancedCtx, setupData);\n  let initial = { ...state,\n    // List of {G, ctx} pairs that can be undone.\n    _undo: [],\n    // List of {G, ctx} pairs that can be redone.\n    _redo: [],\n    // A monotonically non-decreasing ID to ensure that\n    // state updates are only allowed from clients that\n    // are at the same version that the server.\n    _stateID: 0\n  };\n  initial = game.flow.init(initial);\n  initial = Flush(initial, {\n    game\n  }); // Initialize undo stack.\n\n  if (!game.disableUndo) {\n    initial._undo = [{\n      G: initial.G,\n      ctx: initial.ctx,\n      plugins: initial.plugins\n    }];\n  }\n\n  return initial;\n}\n\nexport { InitializeGame as I };","map":{"version":3,"sources":["/Users/goldenowl/Desktop/example-boardgame/node_modules/boardgame.io/dist/esm/initialize-ca65fd4a.js"],"names":["r","Setup","f","Enhance","E","EnhanceCtx","h","Flush","P","ProcessGameConfig","InitializeGame","game","numPlayers","setupData","ctx","flow","state","G","plugins","playerID","undefined","enhancedCtx","setup","initial","_undo","_redo","_stateID","init","disableUndo","I"],"mappings":"AAAA,SAASA,CAAC,IAAIC,KAAd,EAAqBC,CAAC,IAAIC,OAA1B,EAAmCC,CAAC,IAAIC,UAAxC,EAAoDC,CAAC,IAAIC,KAAzD,QAAsE,0BAAtE;AACA,SAASC,CAAC,IAAIC,iBAAd,QAAuC,uBAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA;AAApB,CAAxB,EAA0D;AACtDF,EAAAA,IAAI,GAAGF,iBAAiB,CAACE,IAAD,CAAxB;;AACA,MAAI,CAACC,UAAL,EAAiB;AACbA,IAAAA,UAAU,GAAG,CAAb;AACH;;AACD,QAAME,GAAG,GAAGH,IAAI,CAACI,IAAL,CAAUD,GAAV,CAAcF,UAAd,CAAZ;AACA,MAAII,KAAK,GAAG;AACR;AACAC,IAAAA,CAAC,EAAE,EAFK;AAGR;AACAH,IAAAA,GAJQ;AAKR;AACAI,IAAAA,OAAO,EAAE;AAND,GAAZ,CANsD,CActD;;AACAF,EAAAA,KAAK,GAAGf,KAAK,CAACe,KAAD,EAAQ;AAAEL,IAAAA;AAAF,GAAR,CAAb;AACAK,EAAAA,KAAK,GAAGb,OAAO,CAACa,KAAD,EAAQ;AAAEL,IAAAA,IAAF;AAAQQ,IAAAA,QAAQ,EAAEC;AAAlB,GAAR,CAAf;AACA,QAAMC,WAAW,GAAGhB,UAAU,CAACW,KAAD,CAA9B;AACAA,EAAAA,KAAK,CAACC,CAAN,GAAUN,IAAI,CAACW,KAAL,CAAWD,WAAX,EAAwBR,SAAxB,CAAV;AACA,MAAIU,OAAO,GAAG,EACV,GAAGP,KADO;AAEV;AACAQ,IAAAA,KAAK,EAAE,EAHG;AAIV;AACAC,IAAAA,KAAK,EAAE,EALG;AAMV;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE;AATA,GAAd;AAWAH,EAAAA,OAAO,GAAGZ,IAAI,CAACI,IAAL,CAAUY,IAAV,CAAeJ,OAAf,CAAV;AACAA,EAAAA,OAAO,GAAGhB,KAAK,CAACgB,OAAD,EAAU;AAAEZ,IAAAA;AAAF,GAAV,CAAf,CA/BsD,CAgCtD;;AACA,MAAI,CAACA,IAAI,CAACiB,WAAV,EAAuB;AACnBL,IAAAA,OAAO,CAACC,KAAR,GAAgB,CACZ;AACIP,MAAAA,CAAC,EAAEM,OAAO,CAACN,CADf;AAEIH,MAAAA,GAAG,EAAES,OAAO,CAACT,GAFjB;AAGII,MAAAA,OAAO,EAAEK,OAAO,CAACL;AAHrB,KADY,CAAhB;AAOH;;AACD,SAAOK,OAAP;AACH;;AAED,SAASb,cAAc,IAAImB,CAA3B","sourcesContent":["import { r as Setup, f as Enhance, E as EnhanceCtx, h as Flush } from './turn-order-62966a9c.js';\nimport { P as ProcessGameConfig } from './reducer-763b001e.js';\n\n/*\r\n * Copyright 2020 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Creates the initial game state.\r\n */\r\nfunction InitializeGame({ game, numPlayers, setupData, }) {\r\n    game = ProcessGameConfig(game);\r\n    if (!numPlayers) {\r\n        numPlayers = 2;\r\n    }\r\n    const ctx = game.flow.ctx(numPlayers);\r\n    let state = {\r\n        // User managed state.\r\n        G: {},\r\n        // Framework managed state.\r\n        ctx,\r\n        // Plugin related state.\r\n        plugins: {},\r\n    };\r\n    // Run plugins over initial state.\r\n    state = Setup(state, { game });\r\n    state = Enhance(state, { game, playerID: undefined });\r\n    const enhancedCtx = EnhanceCtx(state);\r\n    state.G = game.setup(enhancedCtx, setupData);\r\n    let initial = {\r\n        ...state,\r\n        // List of {G, ctx} pairs that can be undone.\r\n        _undo: [],\r\n        // List of {G, ctx} pairs that can be redone.\r\n        _redo: [],\r\n        // A monotonically non-decreasing ID to ensure that\r\n        // state updates are only allowed from clients that\r\n        // are at the same version that the server.\r\n        _stateID: 0,\r\n    };\r\n    initial = game.flow.init(initial);\r\n    initial = Flush(initial, { game });\r\n    // Initialize undo stack.\r\n    if (!game.disableUndo) {\r\n        initial._undo = [\r\n            {\r\n                G: initial.G,\r\n                ctx: initial.ctx,\r\n                plugins: initial.plugins,\r\n            },\r\n        ];\r\n    }\r\n    return initial;\r\n}\n\nexport { InitializeGame as I };\n"]},"metadata":{},"sourceType":"module"}