{"ast":null,"code":"import 'nanoid';\nimport './Debug-dda4b5bc.js';\nimport 'redux';\nimport './turn-order-62966a9c.js';\nimport 'immer';\nimport 'lodash.isplainobject';\nimport './reducer-763b001e.js';\nimport 'rfc6902';\nimport './initialize-ca65fd4a.js';\nimport './transport-0079de87.js';\nimport { C as Client$1 } from './client-5202a476.js';\nimport 'flatted';\nimport { M as MCTSBot } from './ai-92d44551.js';\nimport { L as LobbyClient } from './client-99609c4d.js';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Cookies from 'react-cookies';\nimport './base-13e38c3e.js';\nimport { S as SocketIO, L as Local } from './socketio-b63c9ee2.js';\nimport './master-41ed1c81.js';\nimport 'socket.io-client';\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n\n/**\r\n * Client\r\n *\r\n * boardgame.io React client.\r\n *\r\n * @param {...object} game - The return value of `Game`.\r\n * @param {...object} numPlayers - The number of players.\r\n * @param {...object} board - The React component for the game.\r\n * @param {...object} loading - (optional) The React component for the loading state.\r\n * @param {...object} multiplayer - Set to a falsy value or a transportFactory, e.g., SocketIO()\r\n * @param {...object} debug - Enables the Debug UI.\r\n * @param {...object} enhancer - Optional enhancer to send to the Redux store\r\n *\r\n * Returns:\r\n *   A React component that wraps board and provides an\r\n *   API through props for it to interact with the framework\r\n *   and dispatch actions such as MAKE_MOVE, GAME_EVENT, RESET,\r\n *   UNDO and REDO.\r\n */\n\nfunction Client(opts) {\n  var _a;\n\n  let {\n    game,\n    numPlayers,\n    loading,\n    board,\n    multiplayer,\n    enhancer,\n    debug\n  } = opts; // Component that is displayed before the client has synced\n  // with the game master.\n\n  if (loading === undefined) {\n    const Loading = () => React.createElement(\"div\", {\n      className: \"bgio-loading\"\n    }, \"connecting...\");\n\n    loading = Loading;\n  }\n  /*\r\n   * WrappedBoard\r\n   *\r\n   * The main React component that wraps the passed in\r\n   * board component and adds the API to its props.\r\n   */\n\n\n  return _a = class WrappedBoard extends React.Component {\n    constructor(props) {\n      super(props);\n\n      if (debug === undefined) {\n        debug = props.debug;\n      }\n\n      this.client = Client$1({\n        game,\n        debug,\n        numPlayers,\n        multiplayer,\n        matchID: props.matchID,\n        playerID: props.playerID,\n        credentials: props.credentials,\n        enhancer\n      });\n    }\n\n    componentDidMount() {\n      this.unsubscribe = this.client.subscribe(() => this.forceUpdate());\n      this.client.start();\n    }\n\n    componentWillUnmount() {\n      this.client.stop();\n      this.unsubscribe();\n    }\n\n    componentDidUpdate(prevProps) {\n      if (this.props.matchID != prevProps.matchID) {\n        this.client.updateMatchID(this.props.matchID);\n      }\n\n      if (this.props.playerID != prevProps.playerID) {\n        this.client.updatePlayerID(this.props.playerID);\n      }\n\n      if (this.props.credentials != prevProps.credentials) {\n        this.client.updateCredentials(this.props.credentials);\n      }\n    }\n\n    render() {\n      const state = this.client.getState();\n\n      if (state === null) {\n        return React.createElement(loading);\n      }\n\n      let _board = null;\n\n      if (board) {\n        _board = React.createElement(board, { ...state,\n          ...this.props,\n          isMultiplayer: !!multiplayer,\n          moves: this.client.moves,\n          events: this.client.events,\n          matchID: this.client.matchID,\n          playerID: this.client.playerID,\n          reset: this.client.reset,\n          undo: this.client.undo,\n          redo: this.client.redo,\n          log: this.client.log,\n          matchData: this.client.matchData,\n          sendChatMessage: this.client.sendChatMessage,\n          chatMessages: this.client.chatMessages\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"bgio-client\"\n      }, _board);\n    }\n\n  }, _a.propTypes = {\n    // The ID of a game to connect to.\n    // Only relevant in multiplayer.\n    matchID: PropTypes.string,\n    // The ID of the player associated with this client.\n    // Only relevant in multiplayer.\n    playerID: PropTypes.string,\n    // This client's authentication credentials.\n    // Only relevant in multiplayer.\n    credentials: PropTypes.string,\n    // Enable / disable the Debug UI.\n    debug: PropTypes.any\n  }, _a.defaultProps = {\n    matchID: 'default',\n    playerID: null,\n    credentials: null,\n    debug: true\n  }, _a;\n}\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n\n\nclass _LobbyConnectionImpl {\n  constructor({\n    server,\n    gameComponents,\n    playerName,\n    playerCredentials\n  }) {\n    this.client = new LobbyClient({\n      server\n    });\n    this.gameComponents = gameComponents;\n    this.playerName = playerName || 'Visitor';\n    this.playerCredentials = playerCredentials;\n    this.matches = [];\n  }\n\n  async refresh() {\n    try {\n      this.matches = [];\n      const games = await this.client.listGames();\n\n      for (const game of games) {\n        if (!this._getGameComponents(game)) continue;\n        const {\n          matches\n        } = await this.client.listMatches(game);\n        this.matches = this.matches.concat(matches);\n      }\n    } catch (error) {\n      throw new Error('failed to retrieve list of matches (' + error + ')');\n    }\n  }\n\n  _getMatchInstance(matchID) {\n    for (const inst of this.matches) {\n      if (inst['matchID'] === matchID) return inst;\n    }\n  }\n\n  _getGameComponents(gameName) {\n    for (const comp of this.gameComponents) {\n      if (comp.game.name === gameName) return comp;\n    }\n  }\n\n  _findPlayer(playerName) {\n    for (const inst of this.matches) {\n      if (inst.players.some(player => player.name === playerName)) return inst;\n    }\n  }\n\n  async join(gameName, matchID, playerID) {\n    try {\n      let inst = this._findPlayer(this.playerName);\n\n      if (inst) {\n        throw new Error('player has already joined ' + inst.matchID);\n      }\n\n      inst = this._getMatchInstance(matchID);\n\n      if (!inst) {\n        throw new Error('game instance ' + matchID + ' not found');\n      }\n\n      const json = await this.client.joinMatch(gameName, matchID, {\n        playerID,\n        playerName: this.playerName\n      });\n      inst.players[Number.parseInt(playerID)].name = this.playerName;\n      this.playerCredentials = json.playerCredentials;\n    } catch (error) {\n      throw new Error('failed to join match ' + matchID + ' (' + error + ')');\n    }\n  }\n\n  async leave(gameName, matchID) {\n    try {\n      const inst = this._getMatchInstance(matchID);\n\n      if (!inst) throw new Error('match instance not found');\n\n      for (const player of inst.players) {\n        if (player.name === this.playerName) {\n          await this.client.leaveMatch(gameName, matchID, {\n            playerID: player.id.toString(),\n            credentials: this.playerCredentials\n          });\n          delete player.name;\n          delete this.playerCredentials;\n          return;\n        }\n      }\n\n      throw new Error('player not found in match');\n    } catch (error) {\n      throw new Error('failed to leave match ' + matchID + ' (' + error + ')');\n    }\n  }\n\n  async disconnect() {\n    const inst = this._findPlayer(this.playerName);\n\n    if (inst) {\n      await this.leave(inst.gameName, inst.matchID);\n    }\n\n    this.matches = [];\n    this.playerName = 'Visitor';\n  }\n\n  async create(gameName, numPlayers) {\n    try {\n      const comp = this._getGameComponents(gameName);\n\n      if (!comp) throw new Error('game not found');\n      if (numPlayers < comp.game.minPlayers || numPlayers > comp.game.maxPlayers) throw new Error('invalid number of players ' + numPlayers);\n      await this.client.createMatch(gameName, {\n        numPlayers\n      });\n    } catch (error) {\n      throw new Error('failed to create match for ' + gameName + ' (' + error + ')');\n    }\n  }\n\n}\n/**\r\n * LobbyConnection\r\n *\r\n * Lobby model.\r\n *\r\n * @param {string}   server - '<host>:<port>' of the server.\r\n * @param {Array}    gameComponents - A map of Board and Game objects for the supported games.\r\n * @param {string}   playerName - The name of the player.\r\n * @param {string}   playerCredentials - The credentials currently used by the player, if any.\r\n *\r\n * Returns:\r\n *   A JS object that synchronizes the list of running game instances with the server and provides an API to create/join/start instances.\r\n */\n\n\nfunction LobbyConnection(opts) {\n  return new _LobbyConnectionImpl(opts);\n}\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n\n\nclass LobbyLoginForm extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      playerName: this.props.playerName,\n      nameErrorMsg: ''\n    };\n\n    this.onClickEnter = () => {\n      if (this.state.playerName === '') return;\n      this.props.onEnter(this.state.playerName);\n    };\n\n    this.onKeyPress = event => {\n      if (event.key === 'Enter') {\n        this.onClickEnter();\n      }\n    };\n\n    this.onChangePlayerName = event => {\n      const name = event.target.value.trim();\n      this.setState({\n        playerName: name,\n        nameErrorMsg: name.length > 0 ? '' : 'empty player name'\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", null, React.createElement(\"p\", {\n      className: \"phase-title\"\n    }, \"Choose a player name:\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.playerName,\n      onChange: this.onChangePlayerName,\n      onKeyPress: this.onKeyPress\n    }), React.createElement(\"span\", {\n      className: \"buttons\"\n    }, React.createElement(\"button\", {\n      className: \"buttons\",\n      onClick: this.onClickEnter\n    }, \"Enter\")), React.createElement(\"br\", null), React.createElement(\"span\", {\n      className: \"error-msg\"\n    }, this.state.nameErrorMsg, React.createElement(\"br\", null)));\n  }\n\n}\n\nLobbyLoginForm.defaultProps = {\n  playerName: ''\n};\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n\nclass LobbyMatchInstance extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this._createSeat = player => {\n      return player.name || '[free]';\n    };\n\n    this._createButtonJoin = (inst, seatId) => React.createElement(\"button\", {\n      key: 'button-join-' + inst.matchID,\n      onClick: () => this.props.onClickJoin(inst.gameName, inst.matchID, '' + seatId)\n    }, \"Join\");\n\n    this._createButtonLeave = inst => React.createElement(\"button\", {\n      key: 'button-leave-' + inst.matchID,\n      onClick: () => this.props.onClickLeave(inst.gameName, inst.matchID)\n    }, \"Leave\");\n\n    this._createButtonPlay = (inst, seatId) => React.createElement(\"button\", {\n      key: 'button-play-' + inst.matchID,\n      onClick: () => this.props.onClickPlay(inst.gameName, {\n        matchID: inst.matchID,\n        playerID: '' + seatId,\n        numPlayers: inst.players.length\n      })\n    }, \"Play\");\n\n    this._createButtonSpectate = inst => React.createElement(\"button\", {\n      key: 'button-spectate-' + inst.matchID,\n      onClick: () => this.props.onClickPlay(inst.gameName, {\n        matchID: inst.matchID,\n        numPlayers: inst.players.length\n      })\n    }, \"Spectate\");\n\n    this._createInstanceButtons = inst => {\n      const playerSeat = inst.players.find(player => player.name === this.props.playerName);\n      const freeSeat = inst.players.find(player => !player.name);\n\n      if (playerSeat && freeSeat) {\n        // already seated: waiting for match to start\n        return this._createButtonLeave(inst);\n      }\n\n      if (freeSeat) {\n        // at least 1 seat is available\n        return this._createButtonJoin(inst, freeSeat.id);\n      } // match is full\n\n\n      if (playerSeat) {\n        return React.createElement(\"div\", null, [this._createButtonPlay(inst, playerSeat.id), this._createButtonLeave(inst)]);\n      } // allow spectating\n\n\n      return this._createButtonSpectate(inst);\n    };\n  }\n\n  render() {\n    const match = this.props.match;\n    let status = 'OPEN';\n\n    if (!match.players.find(player => !player.name)) {\n      status = 'RUNNING';\n    }\n\n    return React.createElement(\"tr\", {\n      key: 'line-' + match.matchID\n    }, React.createElement(\"td\", {\n      key: 'cell-name-' + match.matchID\n    }, match.gameName), React.createElement(\"td\", {\n      key: 'cell-status-' + match.matchID\n    }, status), React.createElement(\"td\", {\n      key: 'cell-seats-' + match.matchID\n    }, match.players.map(this._createSeat).join(', ')), React.createElement(\"td\", {\n      key: 'cell-buttons-' + match.matchID\n    }, this._createInstanceButtons(match)));\n  }\n\n}\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n\n\nclass LobbyCreateMatchForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedGame: 0,\n      numPlayers: 2\n    };\n\n    this._createGameNameOption = (game, idx) => {\n      return React.createElement(\"option\", {\n        key: 'name-option-' + idx,\n        value: idx\n      }, game.game.name);\n    };\n\n    this._createNumPlayersOption = idx => {\n      return React.createElement(\"option\", {\n        key: 'num-option-' + idx,\n        value: idx\n      }, idx);\n    };\n\n    this._createNumPlayersRange = game => {\n      return [...new Array(game.maxPlayers + 1).keys()].slice(game.minPlayers);\n    };\n\n    this.onChangeNumPlayers = event => {\n      this.setState({\n        numPlayers: Number.parseInt(event.target.value)\n      });\n    };\n\n    this.onChangeSelectedGame = event => {\n      const idx = Number.parseInt(event.target.value);\n      this.setState({\n        selectedGame: idx,\n        numPlayers: this.props.games[idx].game.minPlayers\n      });\n    };\n\n    this.onClickCreate = () => {\n      this.props.createMatch(this.props.games[this.state.selectedGame].game.name, this.state.numPlayers);\n    };\n    /* fix min and max number of players */\n\n\n    for (const game of props.games) {\n      const matchDetails = game.game;\n\n      if (!matchDetails.minPlayers) {\n        matchDetails.minPlayers = 1;\n      }\n\n      if (!matchDetails.maxPlayers) {\n        matchDetails.maxPlayers = 4;\n      }\n\n      console.assert(matchDetails.maxPlayers >= matchDetails.minPlayers);\n    }\n\n    this.state = {\n      selectedGame: 0,\n      numPlayers: props.games[0].game.minPlayers\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", null, React.createElement(\"select\", {\n      value: this.state.selectedGame,\n      onChange: evt => this.onChangeSelectedGame(evt)\n    }, this.props.games.map(this._createGameNameOption)), React.createElement(\"span\", null, \"Players:\"), React.createElement(\"select\", {\n      value: this.state.numPlayers,\n      onChange: this.onChangeNumPlayers\n    }, this._createNumPlayersRange(this.props.games[this.state.selectedGame].game).map(this._createNumPlayersOption)), React.createElement(\"span\", {\n      className: \"buttons\"\n    }, React.createElement(\"button\", {\n      onClick: this.onClickCreate\n    }, \"Create\")));\n  }\n\n}\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n\n\nvar LobbyPhases;\n\n(function (LobbyPhases) {\n  LobbyPhases[\"ENTER\"] = \"enter\";\n  LobbyPhases[\"PLAY\"] = \"play\";\n  LobbyPhases[\"LIST\"] = \"list\";\n})(LobbyPhases || (LobbyPhases = {}));\n/**\r\n * Lobby\r\n *\r\n * React lobby component.\r\n *\r\n * @param {Array}  gameComponents - An array of Board and Game objects for the supported games.\r\n * @param {string} lobbyServer - Address of the lobby server (for example 'localhost:8000').\r\n *                               If not set, defaults to the server that served the page.\r\n * @param {string} gameServer - Address of the game server (for example 'localhost:8001').\r\n *                              If not set, defaults to the server that served the page.\r\n * @param {function} clientFactory - Function that is used to create the game clients.\r\n * @param {number} refreshInterval - Interval between server updates (default: 2000ms).\r\n * @param {bool}   debug - Enable debug information (default: false).\r\n *\r\n * Returns:\r\n *   A React component that provides a UI to create, list, join, leave, play or\r\n *   spectate matches (game instances).\r\n */\n\n\nclass Lobby extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      phase: LobbyPhases.ENTER,\n      playerName: 'Visitor',\n      runningMatch: null,\n      errorMsg: '',\n      credentialStore: {}\n    };\n\n    this._createConnection = props => {\n      const name = this.state.playerName;\n      this.connection = LobbyConnection({\n        server: props.lobbyServer,\n        gameComponents: props.gameComponents,\n        playerName: name,\n        playerCredentials: this.state.credentialStore[name]\n      });\n    };\n\n    this._updateCredentials = (playerName, credentials) => {\n      this.setState(prevState => {\n        // clone store or componentDidUpdate will not be triggered\n        const store = Object.assign({}, prevState.credentialStore);\n        store[playerName] = credentials;\n        return {\n          credentialStore: store\n        };\n      });\n    };\n\n    this._updateConnection = async () => {\n      await this.connection.refresh();\n      this.forceUpdate();\n    };\n\n    this._enterLobby = playerName => {\n      this.setState({\n        playerName,\n        phase: LobbyPhases.LIST\n      });\n    };\n\n    this._exitLobby = async () => {\n      await this.connection.disconnect();\n      this.setState({\n        phase: LobbyPhases.ENTER,\n        errorMsg: ''\n      });\n    };\n\n    this._createMatch = async (gameName, numPlayers) => {\n      try {\n        await this.connection.create(gameName, numPlayers);\n        await this.connection.refresh(); // rerender\n\n        this.setState({});\n      } catch (error) {\n        this.setState({\n          errorMsg: error.message\n        });\n      }\n    };\n\n    this._joinMatch = async (gameName, matchID, playerID) => {\n      try {\n        await this.connection.join(gameName, matchID, playerID);\n        await this.connection.refresh();\n\n        this._updateCredentials(this.connection.playerName, this.connection.playerCredentials);\n      } catch (error) {\n        this.setState({\n          errorMsg: error.message\n        });\n      }\n    };\n\n    this._leaveMatch = async (gameName, matchID) => {\n      try {\n        await this.connection.leave(gameName, matchID);\n        await this.connection.refresh();\n\n        this._updateCredentials(this.connection.playerName, this.connection.playerCredentials);\n      } catch (error) {\n        this.setState({\n          errorMsg: error.message\n        });\n      }\n    };\n\n    this._startMatch = (gameName, matchOpts) => {\n      const gameCode = this.connection._getGameComponents(gameName);\n\n      if (!gameCode) {\n        this.setState({\n          errorMsg: 'game ' + gameName + ' not supported'\n        });\n        return;\n      }\n\n      let multiplayer = undefined;\n\n      if (matchOpts.numPlayers > 1) {\n        multiplayer = this.props.gameServer ? SocketIO({\n          server: this.props.gameServer\n        }) : SocketIO();\n      }\n\n      if (matchOpts.numPlayers == 1) {\n        const maxPlayers = gameCode.game.maxPlayers;\n        const bots = {};\n\n        for (let i = 1; i < maxPlayers; i++) {\n          bots[i + ''] = MCTSBot;\n        }\n\n        multiplayer = Local({\n          bots\n        });\n      }\n\n      const app = this.props.clientFactory({\n        game: gameCode.game,\n        board: gameCode.board,\n        debug: this.props.debug,\n        multiplayer\n      });\n      const match = {\n        app: app,\n        matchID: matchOpts.matchID,\n        playerID: matchOpts.numPlayers > 1 ? matchOpts.playerID : '0',\n        credentials: this.connection.playerCredentials\n      };\n      this.setState({\n        phase: LobbyPhases.PLAY,\n        runningMatch: match\n      });\n    };\n\n    this._exitMatch = () => {\n      this.setState({\n        phase: LobbyPhases.LIST,\n        runningMatch: null\n      });\n    };\n\n    this._getPhaseVisibility = phase => {\n      return this.state.phase !== phase ? 'hidden' : 'phase';\n    };\n\n    this.renderMatches = (matches, playerName) => {\n      return matches.map(match => {\n        const {\n          matchID,\n          gameName,\n          players\n        } = match;\n        return React.createElement(LobbyMatchInstance, {\n          key: 'instance-' + matchID,\n          match: {\n            matchID,\n            gameName,\n            players: Object.values(players)\n          },\n          playerName: playerName,\n          onClickJoin: this._joinMatch,\n          onClickLeave: this._leaveMatch,\n          onClickPlay: this._startMatch\n        });\n      });\n    };\n\n    this._createConnection(this.props);\n\n    setInterval(this._updateConnection, this.props.refreshInterval);\n  }\n\n  componentDidMount() {\n    const cookie = Cookies.load('lobbyState') || {};\n\n    if (cookie.phase && cookie.phase === LobbyPhases.PLAY) {\n      cookie.phase = LobbyPhases.LIST;\n    }\n\n    this.setState({\n      phase: cookie.phase || LobbyPhases.ENTER,\n      playerName: cookie.playerName || 'Visitor',\n      credentialStore: cookie.credentialStore || {}\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const name = this.state.playerName;\n    const creds = this.state.credentialStore[name];\n\n    if (prevState.phase !== this.state.phase || prevState.credentialStore[name] !== creds || prevState.playerName !== name) {\n      this._createConnection(this.props);\n\n      this._updateConnection();\n\n      const cookie = {\n        phase: this.state.phase,\n        playerName: name,\n        credentialStore: this.state.credentialStore\n      };\n      Cookies.save('lobbyState', cookie, {\n        path: '/'\n      });\n    }\n  }\n\n  render() {\n    const {\n      gameComponents,\n      renderer\n    } = this.props;\n    const {\n      errorMsg,\n      playerName,\n      phase,\n      runningMatch\n    } = this.state;\n\n    if (renderer) {\n      return renderer({\n        errorMsg,\n        gameComponents,\n        matches: this.connection.matches,\n        phase,\n        playerName,\n        runningMatch,\n        handleEnterLobby: this._enterLobby,\n        handleExitLobby: this._exitLobby,\n        handleCreateMatch: this._createMatch,\n        handleJoinMatch: this._joinMatch,\n        handleLeaveMatch: this._leaveMatch,\n        handleExitMatch: this._exitMatch,\n        handleRefreshMatches: this._updateConnection,\n        handleStartMatch: this._startMatch\n      });\n    }\n\n    return React.createElement(\"div\", {\n      id: \"lobby-view\",\n      style: {\n        padding: 50\n      }\n    }, React.createElement(\"div\", {\n      className: this._getPhaseVisibility(LobbyPhases.ENTER)\n    }, React.createElement(LobbyLoginForm, {\n      key: playerName,\n      playerName: playerName,\n      onEnter: this._enterLobby\n    })), React.createElement(\"div\", {\n      className: this._getPhaseVisibility(LobbyPhases.LIST)\n    }, React.createElement(\"p\", null, \"Welcome, \", playerName), React.createElement(\"div\", {\n      className: \"phase-title\",\n      id: \"match-creation\"\n    }, React.createElement(\"span\", null, \"Create a match:\"), React.createElement(LobbyCreateMatchForm, {\n      games: gameComponents,\n      createMatch: this._createMatch\n    })), React.createElement(\"p\", {\n      className: \"phase-title\"\n    }, \"Join a match:\"), React.createElement(\"div\", {\n      id: \"instances\"\n    }, React.createElement(\"table\", null, React.createElement(\"tbody\", null, this.renderMatches(this.connection.matches, playerName))), React.createElement(\"span\", {\n      className: \"error-msg\"\n    }, errorMsg, React.createElement(\"br\", null))), React.createElement(\"p\", {\n      className: \"phase-title\"\n    }, \"Matches that become empty are automatically deleted.\")), React.createElement(\"div\", {\n      className: this._getPhaseVisibility(LobbyPhases.PLAY)\n    }, runningMatch && React.createElement(runningMatch.app, {\n      matchID: runningMatch.matchID,\n      playerID: runningMatch.playerID,\n      credentials: runningMatch.credentials\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      id: \"match-exit\"\n    }, React.createElement(\"button\", {\n      onClick: this._exitMatch\n    }, \"Exit match\"))), React.createElement(\"div\", {\n      className: \"buttons\",\n      id: \"lobby-exit\"\n    }, React.createElement(\"button\", {\n      onClick: this._exitLobby\n    }, \"Exit lobby\")));\n  }\n\n}\n\nLobby.propTypes = {\n  gameComponents: PropTypes.array.isRequired,\n  lobbyServer: PropTypes.string,\n  gameServer: PropTypes.string,\n  debug: PropTypes.bool,\n  clientFactory: PropTypes.func,\n  refreshInterval: PropTypes.number\n};\nLobby.defaultProps = {\n  debug: false,\n  clientFactory: Client,\n  refreshInterval: 2000\n};\nexport { Client, Lobby };","map":{"version":3,"sources":["/Users/goldenowl/Desktop/example-boardgame/node_modules/boardgame.io/dist/esm/react.js"],"names":["C","Client$1","M","MCTSBot","L","LobbyClient","React","PropTypes","Cookies","S","SocketIO","Local","Client","opts","_a","game","numPlayers","loading","board","multiplayer","enhancer","debug","undefined","Loading","createElement","className","WrappedBoard","Component","constructor","props","client","matchID","playerID","credentials","componentDidMount","unsubscribe","subscribe","forceUpdate","start","componentWillUnmount","stop","componentDidUpdate","prevProps","updateMatchID","updatePlayerID","updateCredentials","render","state","getState","_board","isMultiplayer","moves","events","reset","undo","redo","log","matchData","sendChatMessage","chatMessages","propTypes","string","any","defaultProps","_LobbyConnectionImpl","server","gameComponents","playerName","playerCredentials","matches","refresh","games","listGames","_getGameComponents","listMatches","concat","error","Error","_getMatchInstance","inst","gameName","comp","name","_findPlayer","players","some","player","join","json","joinMatch","Number","parseInt","leave","leaveMatch","id","toString","disconnect","create","minPlayers","maxPlayers","createMatch","LobbyConnection","LobbyLoginForm","arguments","nameErrorMsg","onClickEnter","onEnter","onKeyPress","event","key","onChangePlayerName","target","value","trim","setState","length","type","onChange","onClick","LobbyMatchInstance","_createSeat","_createButtonJoin","seatId","onClickJoin","_createButtonLeave","onClickLeave","_createButtonPlay","onClickPlay","_createButtonSpectate","_createInstanceButtons","playerSeat","find","freeSeat","match","status","map","LobbyCreateMatchForm","selectedGame","_createGameNameOption","idx","_createNumPlayersOption","_createNumPlayersRange","Array","keys","slice","onChangeNumPlayers","onChangeSelectedGame","onClickCreate","matchDetails","console","assert","evt","LobbyPhases","Lobby","phase","ENTER","runningMatch","errorMsg","credentialStore","_createConnection","connection","lobbyServer","_updateCredentials","prevState","store","Object","assign","_updateConnection","_enterLobby","LIST","_exitLobby","_createMatch","message","_joinMatch","_leaveMatch","_startMatch","matchOpts","gameCode","gameServer","bots","i","app","clientFactory","PLAY","_exitMatch","_getPhaseVisibility","renderMatches","values","setInterval","refreshInterval","cookie","load","creds","save","path","renderer","handleEnterLobby","handleExitLobby","handleCreateMatch","handleJoinMatch","handleLeaveMatch","handleExitMatch","handleRefreshMatches","handleStartMatch","style","padding","array","isRequired","bool","func","number"],"mappings":"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","sourcesContent":["import 'nanoid';\nimport './Debug-dda4b5bc.js';\nimport 'redux';\nimport './turn-order-62966a9c.js';\nimport 'immer';\nimport 'lodash.isplainobject';\nimport './reducer-763b001e.js';\nimport 'rfc6902';\nimport './initialize-ca65fd4a.js';\nimport './transport-0079de87.js';\nimport { C as Client$1 } from './client-5202a476.js';\nimport 'flatted';\nimport { M as MCTSBot } from './ai-92d44551.js';\nimport { L as LobbyClient } from './client-99609c4d.js';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Cookies from 'react-cookies';\nimport './base-13e38c3e.js';\nimport { S as SocketIO, L as Local } from './socketio-b63c9ee2.js';\nimport './master-41ed1c81.js';\nimport 'socket.io-client';\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Client\r\n *\r\n * boardgame.io React client.\r\n *\r\n * @param {...object} game - The return value of `Game`.\r\n * @param {...object} numPlayers - The number of players.\r\n * @param {...object} board - The React component for the game.\r\n * @param {...object} loading - (optional) The React component for the loading state.\r\n * @param {...object} multiplayer - Set to a falsy value or a transportFactory, e.g., SocketIO()\r\n * @param {...object} debug - Enables the Debug UI.\r\n * @param {...object} enhancer - Optional enhancer to send to the Redux store\r\n *\r\n * Returns:\r\n *   A React component that wraps board and provides an\r\n *   API through props for it to interact with the framework\r\n *   and dispatch actions such as MAKE_MOVE, GAME_EVENT, RESET,\r\n *   UNDO and REDO.\r\n */\r\nfunction Client(opts) {\r\n    var _a;\r\n    let { game, numPlayers, loading, board, multiplayer, enhancer, debug } = opts;\r\n    // Component that is displayed before the client has synced\r\n    // with the game master.\r\n    if (loading === undefined) {\r\n        const Loading = () => React.createElement(\"div\", { className: \"bgio-loading\" }, \"connecting...\");\r\n        loading = Loading;\r\n    }\r\n    /*\r\n     * WrappedBoard\r\n     *\r\n     * The main React component that wraps the passed in\r\n     * board component and adds the API to its props.\r\n     */\r\n    return _a = class WrappedBoard extends React.Component {\r\n            constructor(props) {\r\n                super(props);\r\n                if (debug === undefined) {\r\n                    debug = props.debug;\r\n                }\r\n                this.client = Client$1({\r\n                    game,\r\n                    debug,\r\n                    numPlayers,\r\n                    multiplayer,\r\n                    matchID: props.matchID,\r\n                    playerID: props.playerID,\r\n                    credentials: props.credentials,\r\n                    enhancer,\r\n                });\r\n            }\r\n            componentDidMount() {\r\n                this.unsubscribe = this.client.subscribe(() => this.forceUpdate());\r\n                this.client.start();\r\n            }\r\n            componentWillUnmount() {\r\n                this.client.stop();\r\n                this.unsubscribe();\r\n            }\r\n            componentDidUpdate(prevProps) {\r\n                if (this.props.matchID != prevProps.matchID) {\r\n                    this.client.updateMatchID(this.props.matchID);\r\n                }\r\n                if (this.props.playerID != prevProps.playerID) {\r\n                    this.client.updatePlayerID(this.props.playerID);\r\n                }\r\n                if (this.props.credentials != prevProps.credentials) {\r\n                    this.client.updateCredentials(this.props.credentials);\r\n                }\r\n            }\r\n            render() {\r\n                const state = this.client.getState();\r\n                if (state === null) {\r\n                    return React.createElement(loading);\r\n                }\r\n                let _board = null;\r\n                if (board) {\r\n                    _board = React.createElement(board, {\r\n                        ...state,\r\n                        ...this.props,\r\n                        isMultiplayer: !!multiplayer,\r\n                        moves: this.client.moves,\r\n                        events: this.client.events,\r\n                        matchID: this.client.matchID,\r\n                        playerID: this.client.playerID,\r\n                        reset: this.client.reset,\r\n                        undo: this.client.undo,\r\n                        redo: this.client.redo,\r\n                        log: this.client.log,\r\n                        matchData: this.client.matchData,\r\n                        sendChatMessage: this.client.sendChatMessage,\r\n                        chatMessages: this.client.chatMessages,\r\n                    });\r\n                }\r\n                return React.createElement(\"div\", { className: \"bgio-client\" }, _board);\r\n            }\r\n        },\r\n        _a.propTypes = {\r\n            // The ID of a game to connect to.\r\n            // Only relevant in multiplayer.\r\n            matchID: PropTypes.string,\r\n            // The ID of the player associated with this client.\r\n            // Only relevant in multiplayer.\r\n            playerID: PropTypes.string,\r\n            // This client's authentication credentials.\r\n            // Only relevant in multiplayer.\r\n            credentials: PropTypes.string,\r\n            // Enable / disable the Debug UI.\r\n            debug: PropTypes.any,\r\n        },\r\n        _a.defaultProps = {\r\n            matchID: 'default',\r\n            playerID: null,\r\n            credentials: null,\r\n            debug: true,\r\n        },\r\n        _a;\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nclass _LobbyConnectionImpl {\r\n    constructor({ server, gameComponents, playerName, playerCredentials, }) {\r\n        this.client = new LobbyClient({ server });\r\n        this.gameComponents = gameComponents;\r\n        this.playerName = playerName || 'Visitor';\r\n        this.playerCredentials = playerCredentials;\r\n        this.matches = [];\r\n    }\r\n    async refresh() {\r\n        try {\r\n            this.matches = [];\r\n            const games = await this.client.listGames();\r\n            for (const game of games) {\r\n                if (!this._getGameComponents(game))\r\n                    continue;\r\n                const { matches } = await this.client.listMatches(game);\r\n                this.matches = this.matches.concat(matches);\r\n            }\r\n        }\r\n        catch (error) {\r\n            throw new Error('failed to retrieve list of matches (' + error + ')');\r\n        }\r\n    }\r\n    _getMatchInstance(matchID) {\r\n        for (const inst of this.matches) {\r\n            if (inst['matchID'] === matchID)\r\n                return inst;\r\n        }\r\n    }\r\n    _getGameComponents(gameName) {\r\n        for (const comp of this.gameComponents) {\r\n            if (comp.game.name === gameName)\r\n                return comp;\r\n        }\r\n    }\r\n    _findPlayer(playerName) {\r\n        for (const inst of this.matches) {\r\n            if (inst.players.some((player) => player.name === playerName))\r\n                return inst;\r\n        }\r\n    }\r\n    async join(gameName, matchID, playerID) {\r\n        try {\r\n            let inst = this._findPlayer(this.playerName);\r\n            if (inst) {\r\n                throw new Error('player has already joined ' + inst.matchID);\r\n            }\r\n            inst = this._getMatchInstance(matchID);\r\n            if (!inst) {\r\n                throw new Error('game instance ' + matchID + ' not found');\r\n            }\r\n            const json = await this.client.joinMatch(gameName, matchID, {\r\n                playerID,\r\n                playerName: this.playerName,\r\n            });\r\n            inst.players[Number.parseInt(playerID)].name = this.playerName;\r\n            this.playerCredentials = json.playerCredentials;\r\n        }\r\n        catch (error) {\r\n            throw new Error('failed to join match ' + matchID + ' (' + error + ')');\r\n        }\r\n    }\r\n    async leave(gameName, matchID) {\r\n        try {\r\n            const inst = this._getMatchInstance(matchID);\r\n            if (!inst)\r\n                throw new Error('match instance not found');\r\n            for (const player of inst.players) {\r\n                if (player.name === this.playerName) {\r\n                    await this.client.leaveMatch(gameName, matchID, {\r\n                        playerID: player.id.toString(),\r\n                        credentials: this.playerCredentials,\r\n                    });\r\n                    delete player.name;\r\n                    delete this.playerCredentials;\r\n                    return;\r\n                }\r\n            }\r\n            throw new Error('player not found in match');\r\n        }\r\n        catch (error) {\r\n            throw new Error('failed to leave match ' + matchID + ' (' + error + ')');\r\n        }\r\n    }\r\n    async disconnect() {\r\n        const inst = this._findPlayer(this.playerName);\r\n        if (inst) {\r\n            await this.leave(inst.gameName, inst.matchID);\r\n        }\r\n        this.matches = [];\r\n        this.playerName = 'Visitor';\r\n    }\r\n    async create(gameName, numPlayers) {\r\n        try {\r\n            const comp = this._getGameComponents(gameName);\r\n            if (!comp)\r\n                throw new Error('game not found');\r\n            if (numPlayers < comp.game.minPlayers ||\r\n                numPlayers > comp.game.maxPlayers)\r\n                throw new Error('invalid number of players ' + numPlayers);\r\n            await this.client.createMatch(gameName, { numPlayers });\r\n        }\r\n        catch (error) {\r\n            throw new Error('failed to create match for ' + gameName + ' (' + error + ')');\r\n        }\r\n    }\r\n}\r\n/**\r\n * LobbyConnection\r\n *\r\n * Lobby model.\r\n *\r\n * @param {string}   server - '<host>:<port>' of the server.\r\n * @param {Array}    gameComponents - A map of Board and Game objects for the supported games.\r\n * @param {string}   playerName - The name of the player.\r\n * @param {string}   playerCredentials - The credentials currently used by the player, if any.\r\n *\r\n * Returns:\r\n *   A JS object that synchronizes the list of running game instances with the server and provides an API to create/join/start instances.\r\n */\r\nfunction LobbyConnection(opts) {\r\n    return new _LobbyConnectionImpl(opts);\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nclass LobbyLoginForm extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            playerName: this.props.playerName,\r\n            nameErrorMsg: '',\r\n        };\r\n        this.onClickEnter = () => {\r\n            if (this.state.playerName === '')\r\n                return;\r\n            this.props.onEnter(this.state.playerName);\r\n        };\r\n        this.onKeyPress = (event) => {\r\n            if (event.key === 'Enter') {\r\n                this.onClickEnter();\r\n            }\r\n        };\r\n        this.onChangePlayerName = (event) => {\r\n            const name = event.target.value.trim();\r\n            this.setState({\r\n                playerName: name,\r\n                nameErrorMsg: name.length > 0 ? '' : 'empty player name',\r\n            });\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"p\", { className: \"phase-title\" }, \"Choose a player name:\"),\r\n            React.createElement(\"input\", { type: \"text\", value: this.state.playerName, onChange: this.onChangePlayerName, onKeyPress: this.onKeyPress }),\r\n            React.createElement(\"span\", { className: \"buttons\" },\r\n                React.createElement(\"button\", { className: \"buttons\", onClick: this.onClickEnter }, \"Enter\")),\r\n            React.createElement(\"br\", null),\r\n            React.createElement(\"span\", { className: \"error-msg\" },\r\n                this.state.nameErrorMsg,\r\n                React.createElement(\"br\", null))));\r\n    }\r\n}\r\nLobbyLoginForm.defaultProps = {\r\n    playerName: '',\r\n};\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nclass LobbyMatchInstance extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._createSeat = (player) => {\r\n            return player.name || '[free]';\r\n        };\r\n        this._createButtonJoin = (inst, seatId) => (React.createElement(\"button\", { key: 'button-join-' + inst.matchID, onClick: () => this.props.onClickJoin(inst.gameName, inst.matchID, '' + seatId) }, \"Join\"));\r\n        this._createButtonLeave = (inst) => (React.createElement(\"button\", { key: 'button-leave-' + inst.matchID, onClick: () => this.props.onClickLeave(inst.gameName, inst.matchID) }, \"Leave\"));\r\n        this._createButtonPlay = (inst, seatId) => (React.createElement(\"button\", { key: 'button-play-' + inst.matchID, onClick: () => this.props.onClickPlay(inst.gameName, {\r\n                matchID: inst.matchID,\r\n                playerID: '' + seatId,\r\n                numPlayers: inst.players.length,\r\n            }) }, \"Play\"));\r\n        this._createButtonSpectate = (inst) => (React.createElement(\"button\", { key: 'button-spectate-' + inst.matchID, onClick: () => this.props.onClickPlay(inst.gameName, {\r\n                matchID: inst.matchID,\r\n                numPlayers: inst.players.length,\r\n            }) }, \"Spectate\"));\r\n        this._createInstanceButtons = (inst) => {\r\n            const playerSeat = inst.players.find((player) => player.name === this.props.playerName);\r\n            const freeSeat = inst.players.find((player) => !player.name);\r\n            if (playerSeat && freeSeat) {\r\n                // already seated: waiting for match to start\r\n                return this._createButtonLeave(inst);\r\n            }\r\n            if (freeSeat) {\r\n                // at least 1 seat is available\r\n                return this._createButtonJoin(inst, freeSeat.id);\r\n            }\r\n            // match is full\r\n            if (playerSeat) {\r\n                return (React.createElement(\"div\", null, [\r\n                    this._createButtonPlay(inst, playerSeat.id),\r\n                    this._createButtonLeave(inst),\r\n                ]));\r\n            }\r\n            // allow spectating\r\n            return this._createButtonSpectate(inst);\r\n        };\r\n    }\r\n    render() {\r\n        const match = this.props.match;\r\n        let status = 'OPEN';\r\n        if (!match.players.find((player) => !player.name)) {\r\n            status = 'RUNNING';\r\n        }\r\n        return (React.createElement(\"tr\", { key: 'line-' + match.matchID },\r\n            React.createElement(\"td\", { key: 'cell-name-' + match.matchID }, match.gameName),\r\n            React.createElement(\"td\", { key: 'cell-status-' + match.matchID }, status),\r\n            React.createElement(\"td\", { key: 'cell-seats-' + match.matchID }, match.players.map(this._createSeat).join(', ')),\r\n            React.createElement(\"td\", { key: 'cell-buttons-' + match.matchID }, this._createInstanceButtons(match))));\r\n    }\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nclass LobbyCreateMatchForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedGame: 0,\r\n            numPlayers: 2,\r\n        };\r\n        this._createGameNameOption = (game, idx) => {\r\n            return (React.createElement(\"option\", { key: 'name-option-' + idx, value: idx }, game.game.name));\r\n        };\r\n        this._createNumPlayersOption = (idx) => {\r\n            return (React.createElement(\"option\", { key: 'num-option-' + idx, value: idx }, idx));\r\n        };\r\n        this._createNumPlayersRange = (game) => {\r\n            return [...new Array(game.maxPlayers + 1).keys()].slice(game.minPlayers);\r\n        };\r\n        this.onChangeNumPlayers = (event) => {\r\n            this.setState({\r\n                numPlayers: Number.parseInt(event.target.value),\r\n            });\r\n        };\r\n        this.onChangeSelectedGame = (event) => {\r\n            const idx = Number.parseInt(event.target.value);\r\n            this.setState({\r\n                selectedGame: idx,\r\n                numPlayers: this.props.games[idx].game.minPlayers,\r\n            });\r\n        };\r\n        this.onClickCreate = () => {\r\n            this.props.createMatch(this.props.games[this.state.selectedGame].game.name, this.state.numPlayers);\r\n        };\r\n        /* fix min and max number of players */\r\n        for (const game of props.games) {\r\n            const matchDetails = game.game;\r\n            if (!matchDetails.minPlayers) {\r\n                matchDetails.minPlayers = 1;\r\n            }\r\n            if (!matchDetails.maxPlayers) {\r\n                matchDetails.maxPlayers = 4;\r\n            }\r\n            console.assert(matchDetails.maxPlayers >= matchDetails.minPlayers);\r\n        }\r\n        this.state = {\r\n            selectedGame: 0,\r\n            numPlayers: props.games[0].game.minPlayers,\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"select\", { value: this.state.selectedGame, onChange: (evt) => this.onChangeSelectedGame(evt) }, this.props.games.map(this._createGameNameOption)),\r\n            React.createElement(\"span\", null, \"Players:\"),\r\n            React.createElement(\"select\", { value: this.state.numPlayers, onChange: this.onChangeNumPlayers }, this._createNumPlayersRange(this.props.games[this.state.selectedGame].game).map(this._createNumPlayersOption)),\r\n            React.createElement(\"span\", { className: \"buttons\" },\r\n                React.createElement(\"button\", { onClick: this.onClickCreate }, \"Create\"))));\r\n    }\r\n}\n\n/*\r\n * Copyright 2018 The boardgame.io Authors.\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\nvar LobbyPhases;\r\n(function (LobbyPhases) {\r\n    LobbyPhases[\"ENTER\"] = \"enter\";\r\n    LobbyPhases[\"PLAY\"] = \"play\";\r\n    LobbyPhases[\"LIST\"] = \"list\";\r\n})(LobbyPhases || (LobbyPhases = {}));\r\n/**\r\n * Lobby\r\n *\r\n * React lobby component.\r\n *\r\n * @param {Array}  gameComponents - An array of Board and Game objects for the supported games.\r\n * @param {string} lobbyServer - Address of the lobby server (for example 'localhost:8000').\r\n *                               If not set, defaults to the server that served the page.\r\n * @param {string} gameServer - Address of the game server (for example 'localhost:8001').\r\n *                              If not set, defaults to the server that served the page.\r\n * @param {function} clientFactory - Function that is used to create the game clients.\r\n * @param {number} refreshInterval - Interval between server updates (default: 2000ms).\r\n * @param {bool}   debug - Enable debug information (default: false).\r\n *\r\n * Returns:\r\n *   A React component that provides a UI to create, list, join, leave, play or\r\n *   spectate matches (game instances).\r\n */\r\nclass Lobby extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            phase: LobbyPhases.ENTER,\r\n            playerName: 'Visitor',\r\n            runningMatch: null,\r\n            errorMsg: '',\r\n            credentialStore: {},\r\n        };\r\n        this._createConnection = (props) => {\r\n            const name = this.state.playerName;\r\n            this.connection = LobbyConnection({\r\n                server: props.lobbyServer,\r\n                gameComponents: props.gameComponents,\r\n                playerName: name,\r\n                playerCredentials: this.state.credentialStore[name],\r\n            });\r\n        };\r\n        this._updateCredentials = (playerName, credentials) => {\r\n            this.setState((prevState) => {\r\n                // clone store or componentDidUpdate will not be triggered\r\n                const store = Object.assign({}, prevState.credentialStore);\r\n                store[playerName] = credentials;\r\n                return { credentialStore: store };\r\n            });\r\n        };\r\n        this._updateConnection = async () => {\r\n            await this.connection.refresh();\r\n            this.forceUpdate();\r\n        };\r\n        this._enterLobby = (playerName) => {\r\n            this.setState({ playerName, phase: LobbyPhases.LIST });\r\n        };\r\n        this._exitLobby = async () => {\r\n            await this.connection.disconnect();\r\n            this.setState({ phase: LobbyPhases.ENTER, errorMsg: '' });\r\n        };\r\n        this._createMatch = async (gameName, numPlayers) => {\r\n            try {\r\n                await this.connection.create(gameName, numPlayers);\r\n                await this.connection.refresh();\r\n                // rerender\r\n                this.setState({});\r\n            }\r\n            catch (error) {\r\n                this.setState({ errorMsg: error.message });\r\n            }\r\n        };\r\n        this._joinMatch = async (gameName, matchID, playerID) => {\r\n            try {\r\n                await this.connection.join(gameName, matchID, playerID);\r\n                await this.connection.refresh();\r\n                this._updateCredentials(this.connection.playerName, this.connection.playerCredentials);\r\n            }\r\n            catch (error) {\r\n                this.setState({ errorMsg: error.message });\r\n            }\r\n        };\r\n        this._leaveMatch = async (gameName, matchID) => {\r\n            try {\r\n                await this.connection.leave(gameName, matchID);\r\n                await this.connection.refresh();\r\n                this._updateCredentials(this.connection.playerName, this.connection.playerCredentials);\r\n            }\r\n            catch (error) {\r\n                this.setState({ errorMsg: error.message });\r\n            }\r\n        };\r\n        this._startMatch = (gameName, matchOpts) => {\r\n            const gameCode = this.connection._getGameComponents(gameName);\r\n            if (!gameCode) {\r\n                this.setState({\r\n                    errorMsg: 'game ' + gameName + ' not supported',\r\n                });\r\n                return;\r\n            }\r\n            let multiplayer = undefined;\r\n            if (matchOpts.numPlayers > 1) {\r\n                multiplayer = this.props.gameServer\r\n                    ? SocketIO({ server: this.props.gameServer })\r\n                    : SocketIO();\r\n            }\r\n            if (matchOpts.numPlayers == 1) {\r\n                const maxPlayers = gameCode.game.maxPlayers;\r\n                const bots = {};\r\n                for (let i = 1; i < maxPlayers; i++) {\r\n                    bots[i + ''] = MCTSBot;\r\n                }\r\n                multiplayer = Local({ bots });\r\n            }\r\n            const app = this.props.clientFactory({\r\n                game: gameCode.game,\r\n                board: gameCode.board,\r\n                debug: this.props.debug,\r\n                multiplayer,\r\n            });\r\n            const match = {\r\n                app: app,\r\n                matchID: matchOpts.matchID,\r\n                playerID: matchOpts.numPlayers > 1 ? matchOpts.playerID : '0',\r\n                credentials: this.connection.playerCredentials,\r\n            };\r\n            this.setState({ phase: LobbyPhases.PLAY, runningMatch: match });\r\n        };\r\n        this._exitMatch = () => {\r\n            this.setState({ phase: LobbyPhases.LIST, runningMatch: null });\r\n        };\r\n        this._getPhaseVisibility = (phase) => {\r\n            return this.state.phase !== phase ? 'hidden' : 'phase';\r\n        };\r\n        this.renderMatches = (matches, playerName) => {\r\n            return matches.map((match) => {\r\n                const { matchID, gameName, players } = match;\r\n                return (React.createElement(LobbyMatchInstance, { key: 'instance-' + matchID, match: { matchID, gameName, players: Object.values(players) }, playerName: playerName, onClickJoin: this._joinMatch, onClickLeave: this._leaveMatch, onClickPlay: this._startMatch }));\r\n            });\r\n        };\r\n        this._createConnection(this.props);\r\n        setInterval(this._updateConnection, this.props.refreshInterval);\r\n    }\r\n    componentDidMount() {\r\n        const cookie = Cookies.load('lobbyState') || {};\r\n        if (cookie.phase && cookie.phase === LobbyPhases.PLAY) {\r\n            cookie.phase = LobbyPhases.LIST;\r\n        }\r\n        this.setState({\r\n            phase: cookie.phase || LobbyPhases.ENTER,\r\n            playerName: cookie.playerName || 'Visitor',\r\n            credentialStore: cookie.credentialStore || {},\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const name = this.state.playerName;\r\n        const creds = this.state.credentialStore[name];\r\n        if (prevState.phase !== this.state.phase ||\r\n            prevState.credentialStore[name] !== creds ||\r\n            prevState.playerName !== name) {\r\n            this._createConnection(this.props);\r\n            this._updateConnection();\r\n            const cookie = {\r\n                phase: this.state.phase,\r\n                playerName: name,\r\n                credentialStore: this.state.credentialStore,\r\n            };\r\n            Cookies.save('lobbyState', cookie, { path: '/' });\r\n        }\r\n    }\r\n    render() {\r\n        const { gameComponents, renderer } = this.props;\r\n        const { errorMsg, playerName, phase, runningMatch } = this.state;\r\n        if (renderer) {\r\n            return renderer({\r\n                errorMsg,\r\n                gameComponents,\r\n                matches: this.connection.matches,\r\n                phase,\r\n                playerName,\r\n                runningMatch,\r\n                handleEnterLobby: this._enterLobby,\r\n                handleExitLobby: this._exitLobby,\r\n                handleCreateMatch: this._createMatch,\r\n                handleJoinMatch: this._joinMatch,\r\n                handleLeaveMatch: this._leaveMatch,\r\n                handleExitMatch: this._exitMatch,\r\n                handleRefreshMatches: this._updateConnection,\r\n                handleStartMatch: this._startMatch,\r\n            });\r\n        }\r\n        return (React.createElement(\"div\", { id: \"lobby-view\", style: { padding: 50 } },\r\n            React.createElement(\"div\", { className: this._getPhaseVisibility(LobbyPhases.ENTER) },\r\n                React.createElement(LobbyLoginForm, { key: playerName, playerName: playerName, onEnter: this._enterLobby })),\r\n            React.createElement(\"div\", { className: this._getPhaseVisibility(LobbyPhases.LIST) },\r\n                React.createElement(\"p\", null,\r\n                    \"Welcome, \",\r\n                    playerName),\r\n                React.createElement(\"div\", { className: \"phase-title\", id: \"match-creation\" },\r\n                    React.createElement(\"span\", null, \"Create a match:\"),\r\n                    React.createElement(LobbyCreateMatchForm, { games: gameComponents, createMatch: this._createMatch })),\r\n                React.createElement(\"p\", { className: \"phase-title\" }, \"Join a match:\"),\r\n                React.createElement(\"div\", { id: \"instances\" },\r\n                    React.createElement(\"table\", null,\r\n                        React.createElement(\"tbody\", null, this.renderMatches(this.connection.matches, playerName))),\r\n                    React.createElement(\"span\", { className: \"error-msg\" },\r\n                        errorMsg,\r\n                        React.createElement(\"br\", null))),\r\n                React.createElement(\"p\", { className: \"phase-title\" }, \"Matches that become empty are automatically deleted.\")),\r\n            React.createElement(\"div\", { className: this._getPhaseVisibility(LobbyPhases.PLAY) },\r\n                runningMatch && (React.createElement(runningMatch.app, { matchID: runningMatch.matchID, playerID: runningMatch.playerID, credentials: runningMatch.credentials })),\r\n                React.createElement(\"div\", { className: \"buttons\", id: \"match-exit\" },\r\n                    React.createElement(\"button\", { onClick: this._exitMatch }, \"Exit match\"))),\r\n            React.createElement(\"div\", { className: \"buttons\", id: \"lobby-exit\" },\r\n                React.createElement(\"button\", { onClick: this._exitLobby }, \"Exit lobby\"))));\r\n    }\r\n}\r\nLobby.propTypes = {\r\n    gameComponents: PropTypes.array.isRequired,\r\n    lobbyServer: PropTypes.string,\r\n    gameServer: PropTypes.string,\r\n    debug: PropTypes.bool,\r\n    clientFactory: PropTypes.func,\r\n    refreshInterval: PropTypes.number,\r\n};\r\nLobby.defaultProps = {\r\n    debug: false,\r\n    clientFactory: Client,\r\n    refreshInterval: 2000,\r\n};\n\nexport { Client, Lobby };\n"]},"metadata":{},"sourceType":"module"}