{"ast":null,"code":"export const IsVictory = cells => {\n  const positions = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  const isRowComplete = row => {\n    const symbols = row.map(i => cells[i]);\n    return symbols.every(i => i !== null && i === symbols[0]);\n  };\n\n  return positions.map(isRowComplete).some(i => i === true);\n}; // Return true if all `cells` are occupied.\n\n_c = IsVictory;\nexport const IsDraw = cells => {\n  return cells.filter(c => c === null).length === 0;\n};\n_c2 = IsDraw;\nexport default {\n  IsVictory,\n  IsDraw\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IsVictory\");\n$RefreshReg$(_c2, \"IsDraw\");","map":{"version":3,"sources":["/Users/goldenowl/Desktop/example-boardgame/src/moves.js"],"names":["IsVictory","cells","positions","isRowComplete","row","symbols","map","i","every","some","IsDraw","filter","c","length"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,KAAD,IAAW;AAClC,QAAMC,SAAS,GAAG,CAChB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADgB,EACL,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADK,EACM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADN,EACiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADjB,EAEhB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFgB,EAEL,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFK,EAEM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFN,EAEiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFjB,CAAlB;;AAKA,QAAMC,aAAa,GAAGC,GAAG,IAAI;AAC3B,UAAMC,OAAO,GAAGD,GAAG,CAACE,GAAJ,CAAQC,CAAC,IAAIN,KAAK,CAACM,CAAD,CAAlB,CAAhB;AACA,WAAOF,OAAO,CAACG,KAAR,CAAcD,CAAC,IAAIA,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAKF,OAAO,CAAC,CAAD,CAA9C,CAAP;AACD,GAHD;;AAKA,SAAOH,SAAS,CAACI,GAAV,CAAcH,aAAd,EAA6BM,IAA7B,CAAkCF,CAAC,IAAIA,CAAC,KAAK,IAA7C,CAAP;AACD,CAZM,C,CAcP;;KAdaP,S;AAeb,OAAO,MAAMU,MAAM,GAAIT,KAAD,IAAW;AAC/B,SAAOA,KAAK,CAACU,MAAN,CAAaC,CAAC,IAAIA,CAAC,KAAK,IAAxB,EAA8BC,MAA9B,KAAyC,CAAhD;AACD,CAFM;MAAMH,M;AAIb,eAAe;AACdV,EAAAA,SADc;AAEdU,EAAAA;AAFc,CAAf","sourcesContent":["export const IsVictory = (cells) => {\n  const positions = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6],\n    [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]\n  ];\n\n  const isRowComplete = row => {\n    const symbols = row.map(i => cells[i]);\n    return symbols.every(i => i !== null && i === symbols[0]);\n  };\n\n  return positions.map(isRowComplete).some(i => i === true);\n}\n\n// Return true if all `cells` are occupied.\nexport const IsDraw = (cells) => {\n  return cells.filter(c => c === null).length === 0;\n}\n\nexport default {\n\tIsVictory,\n\tIsDraw\n}"]},"metadata":{},"sourceType":"module"}