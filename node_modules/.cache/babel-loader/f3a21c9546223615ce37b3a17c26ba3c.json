{"ast":null,"code":"import { nanoid } from 'nanoid';\nimport { D as Debug } from './Debug-dda4b5bc.js';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { A as ActionCreators, t as reset, u as undo, v as redo, w as PlayerView, M as MAKE_MOVE, G as GAME_EVENT, m as UNDO, n as REDO, R as RESET, p as PATCH, k as UPDATE, l as SYNC } from './turn-order-62966a9c.js';\nimport { P as ProcessGameConfig, C as CreateGameReducer, T as TransientHandlingMiddleware } from './reducer-763b001e.js';\nimport { I as InitializeGame } from './initialize-ca65fd4a.js';\nimport { T as Transport } from './transport-0079de87.js';\n/**\r\n * This class doesn’t do anything, but simplifies the client class by providing\r\n * dummy functions to call, so we don’t need to mock them in the client.\r\n */\n\nclass DummyImpl extends Transport {\n  connect() {}\n\n  disconnect() {}\n\n  onAction() {}\n\n  onChatMessage() {}\n\n  subscribe() {}\n\n  subscribeChatMessage() {}\n\n  subscribeMatchData() {}\n\n  updateCredentials() {}\n\n  updateMatchID() {}\n\n  updatePlayerID() {}\n\n}\n\nconst DummyTransport = opts => new DummyImpl(opts);\n/**\r\n * Class to manage boardgame.io clients and limit debug panel rendering.\r\n */\n\n\nclass ClientManager {\n  constructor() {\n    this.debugPanel = null;\n    this.currentClient = null;\n    this.clients = new Map();\n    this.subscribers = new Map();\n  }\n  /**\r\n   * Register a client with the client manager.\r\n   */\n\n\n  register(client) {\n    // Add client to clients map.\n    this.clients.set(client, client); // Mount debug for this client (no-op if another debug is already mounted).\n\n    this.mountDebug(client);\n    this.notifySubscribers();\n  }\n  /**\r\n   * Unregister a client from the client manager.\r\n   */\n\n\n  unregister(client) {\n    // Remove client from clients map.\n    this.clients.delete(client);\n\n    if (this.currentClient === client) {\n      // If the removed client owned the debug panel, unmount it.\n      this.unmountDebug(); // Mount debug panel for next available client.\n\n      for (const [client] of this.clients) {\n        if (this.debugPanel) break;\n        this.mountDebug(client);\n      }\n    }\n\n    this.notifySubscribers();\n  }\n  /**\r\n   * Subscribe to the client manager state.\r\n   * Calls the passed callback each time the current client changes or a client\r\n   * registers/unregisters.\r\n   * Returns a function to unsubscribe from the state updates.\r\n   */\n\n\n  subscribe(callback) {\n    const id = Symbol();\n    this.subscribers.set(id, callback);\n    callback(this.getState());\n    return () => {\n      this.subscribers.delete(id);\n    };\n  }\n  /**\r\n   * Switch to a client with a matching playerID.\r\n   */\n\n\n  switchPlayerID(playerID) {\n    // For multiplayer clients, try switching control to a different client\n    // that is using the same transport layer.\n    if (this.currentClient.multiplayer) {\n      for (const [client] of this.clients) {\n        if (client.playerID === playerID && client.debugOpt !== false && client.multiplayer === this.currentClient.multiplayer) {\n          this.switchToClient(client);\n          return;\n        }\n      }\n    } // If no client matches, update the playerID for the current client.\n\n\n    this.currentClient.updatePlayerID(playerID);\n    this.notifySubscribers();\n  }\n  /**\r\n   * Set the passed client as the active client for debugging.\r\n   */\n\n\n  switchToClient(client) {\n    if (client === this.currentClient) return;\n    this.unmountDebug();\n    this.mountDebug(client);\n    this.notifySubscribers();\n  }\n  /**\r\n   * Notify all subscribers of changes to the client manager state.\r\n   */\n\n\n  notifySubscribers() {\n    const arg = this.getState();\n    this.subscribers.forEach(cb => {\n      cb(arg);\n    });\n  }\n  /**\r\n   * Get the client manager state.\r\n   */\n\n\n  getState() {\n    return {\n      client: this.currentClient,\n      debuggableClients: this.getDebuggableClients()\n    };\n  }\n  /**\r\n   * Get an array of the registered clients that haven’t disabled the debug panel.\r\n   */\n\n\n  getDebuggableClients() {\n    return [...this.clients.values()].filter(client => client.debugOpt !== false);\n  }\n  /**\r\n   * Mount the debug panel using the passed client.\r\n   */\n\n\n  mountDebug(client) {\n    if (client.debugOpt === false || this.debugPanel !== null || typeof document === 'undefined') {\n      return;\n    }\n\n    let DebugImpl;\n    let target = document.body;\n\n    if (process.env.NODE_ENV !== 'production') {\n      DebugImpl = Debug;\n    }\n\n    if (client.debugOpt && client.debugOpt !== true) {\n      DebugImpl = client.debugOpt.impl || DebugImpl;\n      target = client.debugOpt.target || target;\n    }\n\n    if (DebugImpl) {\n      this.currentClient = client;\n      this.debugPanel = new DebugImpl({\n        target,\n        props: {\n          clientManager: this\n        }\n      });\n    }\n  }\n  /**\r\n   * Unmount the debug panel.\r\n   */\n\n\n  unmountDebug() {\n    this.debugPanel.$destroy();\n    this.debugPanel = null;\n    this.currentClient = null;\n  }\n\n}\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\n\n/**\r\n * Global client manager instance that all clients register with.\r\n */\n\n\nconst GlobalClientManager = new ClientManager();\n/**\r\n * Standardise the passed playerID, using currentPlayer if appropriate.\r\n */\n\nfunction assumedPlayerID(playerID, store, multiplayer) {\n  // In singleplayer mode, if the client does not have a playerID\n  // associated with it, we attach the currentPlayer as playerID.\n  if (!multiplayer && (playerID === null || playerID === undefined)) {\n    const state = store.getState();\n    playerID = state.ctx.currentPlayer;\n  }\n\n  return playerID;\n}\n/**\r\n * createDispatchers\r\n *\r\n * Create action dispatcher wrappers with bound playerID and credentials\r\n */\n\n\nfunction createDispatchers(storeActionType, innerActionNames, store, playerID, credentials, multiplayer) {\n  return innerActionNames.reduce((dispatchers, name) => {\n    dispatchers[name] = function (...args) {\n      store.dispatch(ActionCreators[storeActionType](name, args, assumedPlayerID(playerID, store, multiplayer), credentials));\n    };\n\n    return dispatchers;\n  }, {});\n} // Creates a set of dispatchers to make moves.\n\n\nconst createMoveDispatchers = createDispatchers.bind(null, 'makeMove'); // Creates a set of dispatchers to dispatch game flow events.\n\nconst createEventDispatchers = createDispatchers.bind(null, 'gameEvent'); // Creates a set of dispatchers to dispatch actions to plugins.\n\nconst createPluginDispatchers = createDispatchers.bind(null, 'plugin');\n/**\r\n * Implementation of Client (see below).\r\n */\n\nclass _ClientImpl {\n  constructor({\n    game,\n    debug,\n    numPlayers,\n    multiplayer,\n    matchID: matchID,\n    playerID,\n    credentials,\n    enhancer\n  }) {\n    this.game = ProcessGameConfig(game);\n    this.playerID = playerID;\n    this.matchID = matchID;\n    this.credentials = credentials;\n    this.multiplayer = multiplayer;\n    this.debugOpt = debug;\n    this.manager = GlobalClientManager;\n    this.gameStateOverride = null;\n    this.subscribers = {};\n    this._running = false;\n    this.reducer = CreateGameReducer({\n      game: this.game,\n      isClient: multiplayer !== undefined\n    });\n    this.initialState = null;\n\n    if (!multiplayer) {\n      this.initialState = InitializeGame({\n        game: this.game,\n        numPlayers\n      });\n    }\n\n    this.reset = () => {\n      this.store.dispatch(reset(this.initialState));\n    };\n\n    this.undo = () => {\n      const undo$1 = undo(assumedPlayerID(this.playerID, this.store, this.multiplayer), this.credentials);\n      this.store.dispatch(undo$1);\n    };\n\n    this.redo = () => {\n      const redo$1 = redo(assumedPlayerID(this.playerID, this.store, this.multiplayer), this.credentials);\n      this.store.dispatch(redo$1);\n    };\n\n    this.log = [];\n    /**\r\n     * Middleware that manages the log object.\r\n     * Reducers generate deltalogs, which are log events\r\n     * that are the result of application of a single action.\r\n     * The master may also send back a deltalog or the entire\r\n     * log depending on the type of request.\r\n     * The middleware below takes care of all these cases while\r\n     * managing the log object.\r\n     */\n\n    const LogMiddleware = store => next => action => {\n      const result = next(action);\n      const state = store.getState();\n\n      switch (action.type) {\n        case MAKE_MOVE:\n        case GAME_EVENT:\n        case UNDO:\n        case REDO:\n          {\n            const deltalog = state.deltalog;\n            this.log = [...this.log, ...deltalog];\n            break;\n          }\n\n        case RESET:\n          {\n            this.log = [];\n            break;\n          }\n\n        case PATCH:\n        case UPDATE:\n          {\n            let id = -1;\n\n            if (this.log.length > 0) {\n              id = this.log[this.log.length - 1]._stateID;\n            }\n\n            let deltalog = action.deltalog || []; // Filter out actions that are already present\n            // in the current log. This may occur when the\n            // client adds an entry to the log followed by\n            // the update from the master here.\n\n            deltalog = deltalog.filter(l => l._stateID > id);\n            this.log = [...this.log, ...deltalog];\n            break;\n          }\n\n        case SYNC:\n          {\n            this.initialState = action.initialState;\n            this.log = action.log || [];\n            break;\n          }\n      }\n\n      return result;\n    };\n    /**\r\n     * Middleware that intercepts actions and sends them to the master,\r\n     * which keeps the authoritative version of the state.\r\n     */\n\n\n    const TransportMiddleware = store => next => action => {\n      const baseState = store.getState();\n      const result = next(action);\n\n      if (!('clientOnly' in action)) {\n        this.transport.onAction(baseState, action);\n      }\n\n      return result;\n    };\n    /**\r\n     * Middleware that intercepts actions and invokes the subscription callback.\r\n     */\n\n\n    const SubscriptionMiddleware = () => next => action => {\n      const result = next(action);\n      this.notifySubscribers();\n      return result;\n    };\n\n    const middleware = applyMiddleware(TransientHandlingMiddleware, SubscriptionMiddleware, TransportMiddleware, LogMiddleware);\n    enhancer = enhancer !== undefined ? compose(middleware, enhancer) : middleware;\n    this.store = createStore(this.reducer, this.initialState, enhancer);\n    if (!multiplayer) multiplayer = DummyTransport;\n    this.transport = multiplayer({\n      gameKey: game,\n      game: this.game,\n      store: this.store,\n      matchID,\n      playerID,\n      credentials,\n      gameName: this.game.name,\n      numPlayers\n    });\n    this.createDispatchers();\n    this.transport.subscribeMatchData(metadata => {\n      this.matchData = metadata;\n      this.notifySubscribers();\n    });\n    this.chatMessages = [];\n\n    this.sendChatMessage = payload => {\n      this.transport.onChatMessage(this.matchID, {\n        id: nanoid(7),\n        sender: this.playerID,\n        payload: payload\n      });\n    };\n\n    this.transport.subscribeChatMessage(message => {\n      this.chatMessages = [...this.chatMessages, message];\n      this.notifySubscribers();\n    });\n  }\n\n  notifySubscribers() {\n    Object.values(this.subscribers).forEach(fn => fn(this.getState()));\n  }\n\n  overrideGameState(state) {\n    this.gameStateOverride = state;\n    this.notifySubscribers();\n  }\n\n  start() {\n    this.transport.connect();\n    this._running = true;\n    this.manager.register(this);\n  }\n\n  stop() {\n    this.transport.disconnect();\n    this._running = false;\n    this.manager.unregister(this);\n  }\n\n  subscribe(fn) {\n    const id = Object.keys(this.subscribers).length;\n    this.subscribers[id] = fn;\n    this.transport.subscribe(() => this.notifySubscribers());\n\n    if (this._running || !this.multiplayer) {\n      fn(this.getState());\n    } // Return a handle that allows the caller to unsubscribe.\n\n\n    return () => {\n      delete this.subscribers[id];\n    };\n  }\n\n  getInitialState() {\n    return this.initialState;\n  }\n\n  getState() {\n    let state = this.store.getState();\n\n    if (this.gameStateOverride !== null) {\n      state = this.gameStateOverride;\n    } // This is the state before a sync with the game master.\n\n\n    if (state === null) {\n      return state;\n    } // isActive.\n\n\n    let isActive = true;\n    const isPlayerActive = this.game.flow.isPlayerActive(state.G, state.ctx, this.playerID);\n\n    if (this.multiplayer && !isPlayerActive) {\n      isActive = false;\n    }\n\n    if (!this.multiplayer && this.playerID !== null && this.playerID !== undefined && !isPlayerActive) {\n      isActive = false;\n    }\n\n    if (state.ctx.gameover !== undefined) {\n      isActive = false;\n    } // Secrets are normally stripped on the server,\n    // but we also strip them here so that game developers\n    // can see their effects while prototyping.\n    // Do not strip again if this is a multiplayer game\n    // since the server has already stripped secret info. (issue #818)\n\n\n    if (!this.multiplayer) {\n      state = { ...state,\n        G: this.game.playerView(state.G, state.ctx, this.playerID),\n        plugins: PlayerView(state, this)\n      };\n    } // Combine into return value.\n\n\n    return { ...state,\n      log: this.log,\n      isActive,\n      isConnected: this.transport.isConnected\n    };\n  }\n\n  createDispatchers() {\n    this.moves = createMoveDispatchers(this.game.moveNames, this.store, this.playerID, this.credentials, this.multiplayer);\n    this.events = createEventDispatchers(this.game.flow.enabledEventNames, this.store, this.playerID, this.credentials, this.multiplayer);\n    this.plugins = createPluginDispatchers(this.game.pluginNames, this.store, this.playerID, this.credentials, this.multiplayer);\n  }\n\n  updatePlayerID(playerID) {\n    this.playerID = playerID;\n    this.createDispatchers();\n    this.transport.updatePlayerID(playerID);\n    this.notifySubscribers();\n  }\n\n  updateMatchID(matchID) {\n    this.matchID = matchID;\n    this.createDispatchers();\n    this.transport.updateMatchID(matchID);\n    this.notifySubscribers();\n  }\n\n  updateCredentials(credentials) {\n    this.credentials = credentials;\n    this.createDispatchers();\n    this.transport.updateCredentials(credentials);\n    this.notifySubscribers();\n  }\n\n}\n/**\r\n * Client\r\n *\r\n * boardgame.io JS client.\r\n *\r\n * @param {...object} game - The return value of `Game`.\r\n * @param {...object} numPlayers - The number of players.\r\n * @param {...object} multiplayer - Set to a falsy value or a transportFactory, e.g., SocketIO()\r\n * @param {...object} matchID - The matchID that you want to connect to.\r\n * @param {...object} playerID - The playerID associated with this client.\r\n * @param {...string} credentials - The authentication credentials associated with this client.\r\n *\r\n * Returns:\r\n *   A JS object that provides an API to interact with the\r\n *   game by dispatching moves and events.\r\n */\n\n\nfunction Client(opts) {\n  return new _ClientImpl(opts);\n}\n\nexport { Client as C };","map":{"version":3,"sources":["/Users/goldenowl/Desktop/example-boardgame/node_modules/boardgame.io/dist/esm/client-5202a476.js"],"names":["nanoid","D","Debug","applyMiddleware","compose","createStore","A","ActionCreators","t","reset","u","undo","v","redo","w","PlayerView","M","MAKE_MOVE","G","GAME_EVENT","m","UNDO","n","REDO","R","RESET","p","PATCH","k","UPDATE","l","SYNC","P","ProcessGameConfig","C","CreateGameReducer","T","TransientHandlingMiddleware","I","InitializeGame","Transport","DummyImpl","connect","disconnect","onAction","onChatMessage","subscribe","subscribeChatMessage","subscribeMatchData","updateCredentials","updateMatchID","updatePlayerID","DummyTransport","opts","ClientManager","constructor","debugPanel","currentClient","clients","Map","subscribers","register","client","set","mountDebug","notifySubscribers","unregister","delete","unmountDebug","callback","id","Symbol","getState","switchPlayerID","playerID","multiplayer","debugOpt","switchToClient","arg","forEach","cb","debuggableClients","getDebuggableClients","values","filter","document","DebugImpl","target","body","process","env","NODE_ENV","impl","props","clientManager","$destroy","GlobalClientManager","assumedPlayerID","store","undefined","state","ctx","currentPlayer","createDispatchers","storeActionType","innerActionNames","credentials","reduce","dispatchers","name","args","dispatch","createMoveDispatchers","bind","createEventDispatchers","createPluginDispatchers","_ClientImpl","game","debug","numPlayers","matchID","enhancer","manager","gameStateOverride","_running","reducer","isClient","initialState","undo$1","redo$1","log","LogMiddleware","next","action","result","type","deltalog","length","_stateID","TransportMiddleware","baseState","transport","SubscriptionMiddleware","middleware","gameKey","gameName","metadata","matchData","chatMessages","sendChatMessage","payload","sender","message","Object","fn","overrideGameState","start","stop","keys","getInitialState","isActive","isPlayerActive","flow","gameover","playerView","plugins","isConnected","moves","moveNames","events","enabledEventNames","pluginNames","Client"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid';\nimport { D as Debug } from './Debug-dda4b5bc.js';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { A as ActionCreators, t as reset, u as undo, v as redo, w as PlayerView, M as MAKE_MOVE, G as GAME_EVENT, m as UNDO, n as REDO, R as RESET, p as PATCH, k as UPDATE, l as SYNC } from './turn-order-62966a9c.js';\nimport { P as ProcessGameConfig, C as CreateGameReducer, T as TransientHandlingMiddleware } from './reducer-763b001e.js';\nimport { I as InitializeGame } from './initialize-ca65fd4a.js';\nimport { T as Transport } from './transport-0079de87.js';\n\n/**\r\n * This class doesn’t do anything, but simplifies the client class by providing\r\n * dummy functions to call, so we don’t need to mock them in the client.\r\n */\r\nclass DummyImpl extends Transport {\r\n    connect() { }\r\n    disconnect() { }\r\n    onAction() { }\r\n    onChatMessage() { }\r\n    subscribe() { }\r\n    subscribeChatMessage() { }\r\n    subscribeMatchData() { }\r\n    updateCredentials() { }\r\n    updateMatchID() { }\r\n    updatePlayerID() { }\r\n}\r\nconst DummyTransport = (opts) => new DummyImpl(opts);\n\n/**\r\n * Class to manage boardgame.io clients and limit debug panel rendering.\r\n */\r\nclass ClientManager {\r\n    constructor() {\r\n        this.debugPanel = null;\r\n        this.currentClient = null;\r\n        this.clients = new Map();\r\n        this.subscribers = new Map();\r\n    }\r\n    /**\r\n     * Register a client with the client manager.\r\n     */\r\n    register(client) {\r\n        // Add client to clients map.\r\n        this.clients.set(client, client);\r\n        // Mount debug for this client (no-op if another debug is already mounted).\r\n        this.mountDebug(client);\r\n        this.notifySubscribers();\r\n    }\r\n    /**\r\n     * Unregister a client from the client manager.\r\n     */\r\n    unregister(client) {\r\n        // Remove client from clients map.\r\n        this.clients.delete(client);\r\n        if (this.currentClient === client) {\r\n            // If the removed client owned the debug panel, unmount it.\r\n            this.unmountDebug();\r\n            // Mount debug panel for next available client.\r\n            for (const [client] of this.clients) {\r\n                if (this.debugPanel)\r\n                    break;\r\n                this.mountDebug(client);\r\n            }\r\n        }\r\n        this.notifySubscribers();\r\n    }\r\n    /**\r\n     * Subscribe to the client manager state.\r\n     * Calls the passed callback each time the current client changes or a client\r\n     * registers/unregisters.\r\n     * Returns a function to unsubscribe from the state updates.\r\n     */\r\n    subscribe(callback) {\r\n        const id = Symbol();\r\n        this.subscribers.set(id, callback);\r\n        callback(this.getState());\r\n        return () => {\r\n            this.subscribers.delete(id);\r\n        };\r\n    }\r\n    /**\r\n     * Switch to a client with a matching playerID.\r\n     */\r\n    switchPlayerID(playerID) {\r\n        // For multiplayer clients, try switching control to a different client\r\n        // that is using the same transport layer.\r\n        if (this.currentClient.multiplayer) {\r\n            for (const [client] of this.clients) {\r\n                if (client.playerID === playerID &&\r\n                    client.debugOpt !== false &&\r\n                    client.multiplayer === this.currentClient.multiplayer) {\r\n                    this.switchToClient(client);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        // If no client matches, update the playerID for the current client.\r\n        this.currentClient.updatePlayerID(playerID);\r\n        this.notifySubscribers();\r\n    }\r\n    /**\r\n     * Set the passed client as the active client for debugging.\r\n     */\r\n    switchToClient(client) {\r\n        if (client === this.currentClient)\r\n            return;\r\n        this.unmountDebug();\r\n        this.mountDebug(client);\r\n        this.notifySubscribers();\r\n    }\r\n    /**\r\n     * Notify all subscribers of changes to the client manager state.\r\n     */\r\n    notifySubscribers() {\r\n        const arg = this.getState();\r\n        this.subscribers.forEach((cb) => {\r\n            cb(arg);\r\n        });\r\n    }\r\n    /**\r\n     * Get the client manager state.\r\n     */\r\n    getState() {\r\n        return {\r\n            client: this.currentClient,\r\n            debuggableClients: this.getDebuggableClients(),\r\n        };\r\n    }\r\n    /**\r\n     * Get an array of the registered clients that haven’t disabled the debug panel.\r\n     */\r\n    getDebuggableClients() {\r\n        return [...this.clients.values()].filter((client) => client.debugOpt !== false);\r\n    }\r\n    /**\r\n     * Mount the debug panel using the passed client.\r\n     */\r\n    mountDebug(client) {\r\n        if (client.debugOpt === false ||\r\n            this.debugPanel !== null ||\r\n            typeof document === 'undefined') {\r\n            return;\r\n        }\r\n        let DebugImpl;\r\n        let target = document.body;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            DebugImpl = Debug;\r\n        }\r\n        if (client.debugOpt && client.debugOpt !== true) {\r\n            DebugImpl = client.debugOpt.impl || DebugImpl;\r\n            target = client.debugOpt.target || target;\r\n        }\r\n        if (DebugImpl) {\r\n            this.currentClient = client;\r\n            this.debugPanel = new DebugImpl({\r\n                target,\r\n                props: { clientManager: this },\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Unmount the debug panel.\r\n     */\r\n    unmountDebug() {\r\n        this.debugPanel.$destroy();\r\n        this.debugPanel = null;\r\n        this.currentClient = null;\r\n    }\r\n}\n\n/*\r\n * Copyright 2017 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * Global client manager instance that all clients register with.\r\n */\r\nconst GlobalClientManager = new ClientManager();\r\n/**\r\n * Standardise the passed playerID, using currentPlayer if appropriate.\r\n */\r\nfunction assumedPlayerID(playerID, store, multiplayer) {\r\n    // In singleplayer mode, if the client does not have a playerID\r\n    // associated with it, we attach the currentPlayer as playerID.\r\n    if (!multiplayer && (playerID === null || playerID === undefined)) {\r\n        const state = store.getState();\r\n        playerID = state.ctx.currentPlayer;\r\n    }\r\n    return playerID;\r\n}\r\n/**\r\n * createDispatchers\r\n *\r\n * Create action dispatcher wrappers with bound playerID and credentials\r\n */\r\nfunction createDispatchers(storeActionType, innerActionNames, store, playerID, credentials, multiplayer) {\r\n    return innerActionNames.reduce((dispatchers, name) => {\r\n        dispatchers[name] = function (...args) {\r\n            store.dispatch(ActionCreators[storeActionType](name, args, assumedPlayerID(playerID, store, multiplayer), credentials));\r\n        };\r\n        return dispatchers;\r\n    }, {});\r\n}\r\n// Creates a set of dispatchers to make moves.\r\nconst createMoveDispatchers = createDispatchers.bind(null, 'makeMove');\r\n// Creates a set of dispatchers to dispatch game flow events.\r\nconst createEventDispatchers = createDispatchers.bind(null, 'gameEvent');\r\n// Creates a set of dispatchers to dispatch actions to plugins.\r\nconst createPluginDispatchers = createDispatchers.bind(null, 'plugin');\r\n/**\r\n * Implementation of Client (see below).\r\n */\r\nclass _ClientImpl {\r\n    constructor({ game, debug, numPlayers, multiplayer, matchID: matchID, playerID, credentials, enhancer, }) {\r\n        this.game = ProcessGameConfig(game);\r\n        this.playerID = playerID;\r\n        this.matchID = matchID;\r\n        this.credentials = credentials;\r\n        this.multiplayer = multiplayer;\r\n        this.debugOpt = debug;\r\n        this.manager = GlobalClientManager;\r\n        this.gameStateOverride = null;\r\n        this.subscribers = {};\r\n        this._running = false;\r\n        this.reducer = CreateGameReducer({\r\n            game: this.game,\r\n            isClient: multiplayer !== undefined,\r\n        });\r\n        this.initialState = null;\r\n        if (!multiplayer) {\r\n            this.initialState = InitializeGame({ game: this.game, numPlayers });\r\n        }\r\n        this.reset = () => {\r\n            this.store.dispatch(reset(this.initialState));\r\n        };\r\n        this.undo = () => {\r\n            const undo$1 = undo(assumedPlayerID(this.playerID, this.store, this.multiplayer), this.credentials);\r\n            this.store.dispatch(undo$1);\r\n        };\r\n        this.redo = () => {\r\n            const redo$1 = redo(assumedPlayerID(this.playerID, this.store, this.multiplayer), this.credentials);\r\n            this.store.dispatch(redo$1);\r\n        };\r\n        this.log = [];\r\n        /**\r\n         * Middleware that manages the log object.\r\n         * Reducers generate deltalogs, which are log events\r\n         * that are the result of application of a single action.\r\n         * The master may also send back a deltalog or the entire\r\n         * log depending on the type of request.\r\n         * The middleware below takes care of all these cases while\r\n         * managing the log object.\r\n         */\r\n        const LogMiddleware = (store) => (next) => (action) => {\r\n            const result = next(action);\r\n            const state = store.getState();\r\n            switch (action.type) {\r\n                case MAKE_MOVE:\r\n                case GAME_EVENT:\r\n                case UNDO:\r\n                case REDO: {\r\n                    const deltalog = state.deltalog;\r\n                    this.log = [...this.log, ...deltalog];\r\n                    break;\r\n                }\r\n                case RESET: {\r\n                    this.log = [];\r\n                    break;\r\n                }\r\n                case PATCH:\r\n                case UPDATE: {\r\n                    let id = -1;\r\n                    if (this.log.length > 0) {\r\n                        id = this.log[this.log.length - 1]._stateID;\r\n                    }\r\n                    let deltalog = action.deltalog || [];\r\n                    // Filter out actions that are already present\r\n                    // in the current log. This may occur when the\r\n                    // client adds an entry to the log followed by\r\n                    // the update from the master here.\r\n                    deltalog = deltalog.filter((l) => l._stateID > id);\r\n                    this.log = [...this.log, ...deltalog];\r\n                    break;\r\n                }\r\n                case SYNC: {\r\n                    this.initialState = action.initialState;\r\n                    this.log = action.log || [];\r\n                    break;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        /**\r\n         * Middleware that intercepts actions and sends them to the master,\r\n         * which keeps the authoritative version of the state.\r\n         */\r\n        const TransportMiddleware = (store) => (next) => (action) => {\r\n            const baseState = store.getState();\r\n            const result = next(action);\r\n            if (!('clientOnly' in action)) {\r\n                this.transport.onAction(baseState, action);\r\n            }\r\n            return result;\r\n        };\r\n        /**\r\n         * Middleware that intercepts actions and invokes the subscription callback.\r\n         */\r\n        const SubscriptionMiddleware = () => (next) => (action) => {\r\n            const result = next(action);\r\n            this.notifySubscribers();\r\n            return result;\r\n        };\r\n        const middleware = applyMiddleware(TransientHandlingMiddleware, SubscriptionMiddleware, TransportMiddleware, LogMiddleware);\r\n        enhancer =\r\n            enhancer !== undefined ? compose(middleware, enhancer) : middleware;\r\n        this.store = createStore(this.reducer, this.initialState, enhancer);\r\n        if (!multiplayer)\r\n            multiplayer = DummyTransport;\r\n        this.transport = multiplayer({\r\n            gameKey: game,\r\n            game: this.game,\r\n            store: this.store,\r\n            matchID,\r\n            playerID,\r\n            credentials,\r\n            gameName: this.game.name,\r\n            numPlayers,\r\n        });\r\n        this.createDispatchers();\r\n        this.transport.subscribeMatchData((metadata) => {\r\n            this.matchData = metadata;\r\n            this.notifySubscribers();\r\n        });\r\n        this.chatMessages = [];\r\n        this.sendChatMessage = (payload) => {\r\n            this.transport.onChatMessage(this.matchID, {\r\n                id: nanoid(7),\r\n                sender: this.playerID,\r\n                payload: payload,\r\n            });\r\n        };\r\n        this.transport.subscribeChatMessage((message) => {\r\n            this.chatMessages = [...this.chatMessages, message];\r\n            this.notifySubscribers();\r\n        });\r\n    }\r\n    notifySubscribers() {\r\n        Object.values(this.subscribers).forEach((fn) => fn(this.getState()));\r\n    }\r\n    overrideGameState(state) {\r\n        this.gameStateOverride = state;\r\n        this.notifySubscribers();\r\n    }\r\n    start() {\r\n        this.transport.connect();\r\n        this._running = true;\r\n        this.manager.register(this);\r\n    }\r\n    stop() {\r\n        this.transport.disconnect();\r\n        this._running = false;\r\n        this.manager.unregister(this);\r\n    }\r\n    subscribe(fn) {\r\n        const id = Object.keys(this.subscribers).length;\r\n        this.subscribers[id] = fn;\r\n        this.transport.subscribe(() => this.notifySubscribers());\r\n        if (this._running || !this.multiplayer) {\r\n            fn(this.getState());\r\n        }\r\n        // Return a handle that allows the caller to unsubscribe.\r\n        return () => {\r\n            delete this.subscribers[id];\r\n        };\r\n    }\r\n    getInitialState() {\r\n        return this.initialState;\r\n    }\r\n    getState() {\r\n        let state = this.store.getState();\r\n        if (this.gameStateOverride !== null) {\r\n            state = this.gameStateOverride;\r\n        }\r\n        // This is the state before a sync with the game master.\r\n        if (state === null) {\r\n            return state;\r\n        }\r\n        // isActive.\r\n        let isActive = true;\r\n        const isPlayerActive = this.game.flow.isPlayerActive(state.G, state.ctx, this.playerID);\r\n        if (this.multiplayer && !isPlayerActive) {\r\n            isActive = false;\r\n        }\r\n        if (!this.multiplayer &&\r\n            this.playerID !== null &&\r\n            this.playerID !== undefined &&\r\n            !isPlayerActive) {\r\n            isActive = false;\r\n        }\r\n        if (state.ctx.gameover !== undefined) {\r\n            isActive = false;\r\n        }\r\n        // Secrets are normally stripped on the server,\r\n        // but we also strip them here so that game developers\r\n        // can see their effects while prototyping.\r\n        // Do not strip again if this is a multiplayer game\r\n        // since the server has already stripped secret info. (issue #818)\r\n        if (!this.multiplayer) {\r\n            state = {\r\n                ...state,\r\n                G: this.game.playerView(state.G, state.ctx, this.playerID),\r\n                plugins: PlayerView(state, this),\r\n            };\r\n        }\r\n        // Combine into return value.\r\n        return {\r\n            ...state,\r\n            log: this.log,\r\n            isActive,\r\n            isConnected: this.transport.isConnected,\r\n        };\r\n    }\r\n    createDispatchers() {\r\n        this.moves = createMoveDispatchers(this.game.moveNames, this.store, this.playerID, this.credentials, this.multiplayer);\r\n        this.events = createEventDispatchers(this.game.flow.enabledEventNames, this.store, this.playerID, this.credentials, this.multiplayer);\r\n        this.plugins = createPluginDispatchers(this.game.pluginNames, this.store, this.playerID, this.credentials, this.multiplayer);\r\n    }\r\n    updatePlayerID(playerID) {\r\n        this.playerID = playerID;\r\n        this.createDispatchers();\r\n        this.transport.updatePlayerID(playerID);\r\n        this.notifySubscribers();\r\n    }\r\n    updateMatchID(matchID) {\r\n        this.matchID = matchID;\r\n        this.createDispatchers();\r\n        this.transport.updateMatchID(matchID);\r\n        this.notifySubscribers();\r\n    }\r\n    updateCredentials(credentials) {\r\n        this.credentials = credentials;\r\n        this.createDispatchers();\r\n        this.transport.updateCredentials(credentials);\r\n        this.notifySubscribers();\r\n    }\r\n}\r\n/**\r\n * Client\r\n *\r\n * boardgame.io JS client.\r\n *\r\n * @param {...object} game - The return value of `Game`.\r\n * @param {...object} numPlayers - The number of players.\r\n * @param {...object} multiplayer - Set to a falsy value or a transportFactory, e.g., SocketIO()\r\n * @param {...object} matchID - The matchID that you want to connect to.\r\n * @param {...object} playerID - The playerID associated with this client.\r\n * @param {...string} credentials - The authentication credentials associated with this client.\r\n *\r\n * Returns:\r\n *   A JS object that provides an API to interact with the\r\n *   game by dispatching moves and events.\r\n */\r\nfunction Client(opts) {\r\n    return new _ClientImpl(opts);\r\n}\n\nexport { Client as C };\n"]},"metadata":{},"sourceType":"module"}