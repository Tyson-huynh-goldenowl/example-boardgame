{"ast":null,"code":"import { clickCell } from './moves';\nimport { IsVictory, IsDraw } from './helper';\nexport const TicTacToe = {\n  setup: () => ({\n    cells: Array(100).fill(null)\n  }),\n  turn: {\n    moveLimit: 1\n  },\n  moves: {\n    clickCell\n  },\n  endIf: (G, ctx) => {\n    if (IsVictory(G.cells)) {\n      return {\n        winner: ctx.currentPlayer\n      };\n    }\n\n    if (IsDraw(G.cells)) {\n      return {\n        draw: true\n      };\n    }\n  },\n  ai: {\n    enumerate: (G, ctx) => {\n      let moves = [];\n\n      for (let i = 0; i < 9; i++) {\n        if (G.cells[i] === null) {\n          moves.push({\n            move: 'clickCell',\n            args: [i]\n          });\n        }\n      }\n\n      return moves;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/goldenowl/Desktop/example-boardgame/src/Game.js"],"names":["clickCell","IsVictory","IsDraw","TicTacToe","setup","cells","Array","fill","turn","moveLimit","moves","endIf","G","ctx","winner","currentPlayer","draw","ai","enumerate","i","push","move","args"],"mappings":"AACA,SAAQA,SAAR,QAAwB,SAAxB;AACA,SAAQC,SAAR,EAAkBC,MAAlB,QAAiC,UAAjC;AAEA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAE,OAAO;AAAEC,IAAAA,KAAK,EAAEC,KAAK,CAAC,GAAD,CAAL,CAAWC,IAAX,CAAgB,IAAhB;AAAT,GAAP,CADgB;AAExBC,EAAAA,IAAI,EAAE;AACHC,IAAAA,SAAS,EAAE;AADR,GAFkB;AAKvBC,EAAAA,KAAK,EAAE;AACLV,IAAAA;AADK,GALgB;AAQxBW,EAAAA,KAAK,EAAE,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAChB,QAAIZ,SAAS,CAACW,CAAC,CAACP,KAAH,CAAb,EAAwB;AACtB,aAAO;AAAES,QAAAA,MAAM,EAAED,GAAG,CAACE;AAAd,OAAP;AACD;;AACD,QAAIb,MAAM,CAACU,CAAC,CAACP,KAAH,CAAV,EAAqB;AACnB,aAAO;AAAEW,QAAAA,IAAI,EAAE;AAAR,OAAP;AACD;AACF,GAfsB;AAgBxBC,EAAAA,EAAE,EAAE;AACDC,IAAAA,SAAS,EAAE,CAACN,CAAD,EAAIC,GAAJ,KAAY;AACrB,UAAIH,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAIP,CAAC,CAACP,KAAF,CAAQc,CAAR,MAAe,IAAnB,EAAyB;AACvBT,UAAAA,KAAK,CAACU,IAAN,CAAW;AAAEC,YAAAA,IAAI,EAAE,WAAR;AAAqBC,YAAAA,IAAI,EAAE,CAACH,CAAD;AAA3B,WAAX;AACD;AACF;;AACD,aAAOT,KAAP;AACD;AATA;AAhBoB,CAAlB","sourcesContent":["\nimport {clickCell} from './moves';\nimport {IsVictory,IsDraw, } from './helper';\n\nexport const TicTacToe = {\n  setup: () => ({ cells: Array(100).fill(null) }),\n\tturn: {\n    moveLimit: 1,\n  },\n  moves: {\n    clickCell,\n  },\n\tendIf: (G, ctx) => {\n    if (IsVictory(G.cells)) {\n      return { winner: ctx.currentPlayer };\n    }\n    if (IsDraw(G.cells)) {\n      return { draw: true };\n    }\n  },\n\tai: {\n    enumerate: (G, ctx) => {\n      let moves = [];\n      for (let i = 0; i < 9; i++) {\n        if (G.cells[i] === null) {\n          moves.push({ move: 'clickCell', args: [i] });\n        }\n      }\n      return moves;\n    },\n\t}\n};"]},"metadata":{},"sourceType":"module"}